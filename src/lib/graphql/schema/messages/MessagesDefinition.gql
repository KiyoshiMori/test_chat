enum MutationType {
   CREATED
   UPDATED
   DELETED
 }

type Message {
    text: String
    time: String
    date: String
    is_readed: Boolean
    messagefrom: Int
    messageto: Int
    messageid: Int
}

input getMessagesInput {
    sender: Int
    receiver: Int
}

input sendMessageInput {
    text: String
    sender: Int
    receiver: Int
}

type Status {
    status: String
    code: Int
}

type MessageSubscribe {
    mutation: MutationType!
    node: Message
    updatedFields: [String]
    previousValue: Message
}

input checkNewMessage {
    receiver: Int
    sender: Int
}

input isTypingInput {
    isTyping: Boolean
    receiver: Int
    sender: Int
}

type isTypingSubscriptionResponse {
    isTyping: Boolean
    receiver: Int
    sender: Int
}
input isTypingSubscriptionInput {
    from: Int
    to: Int
}

extend type Query {
    getMessages(input: getMessagesInput): [Message]!
}

extend type Mutation {
    sendMessage(input: sendMessageInput): Status!
    isTyping(input: isTypingInput): isTypingSubscriptionResponse
}

extend type Subscription {
    newMessage(input: checkNewMessage): Message
    isTypingSubscription(input: isTypingSubscriptionInput): isTypingSubscriptionResponse
}